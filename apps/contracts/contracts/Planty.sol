// SPDX-License-Identifier: MIT

// Planty solidity

pragma solidity ^0.8.19;

import '@openzeppelin/contracts/access/AccessControl.sol';
import './interfaces/IX2EarnRewardsPool.sol';
import '@openzeppelin/contracts/utils/Strings.sol';

/**
 * @title Planty Contract
 * @dev This contract manages a reward system based on cycles. Participants can make valid submissions to earn rewards.
 * Rewards are being distributed by interacting with the VeBetterDAO's X2EarnRewardsPool contract.
 *
 * @notice To distribute rewards this contract necesitates of a valid APP_ID provided by VeBetterDAO when joining the ecosystem.
 * In testnet you can generate the APP_ID by using the VeBetterDAO sandbox at https://dev.testnet.governance.vebetterdao.org/.
 * This contract can be initially deployed without this information and DEFAULT_ADMIN_ROLE can update it later through {Planty-setAppId}.
 *
 * @notice This contract must me set as a `rewardDistributor` inside the X2EarnApps contract to be able to send rewards to users and withdraw.
 */
contract Planty is AccessControl {
    // The X2EarnRewardsPool contract used to distribute rewards
    IX2EarnRewardsPool public x2EarnRewardsPoolContract;

    // AppID given by the X2EarnApps contract of VeBetterDAO
    bytes32 public appId;

    // Mapping from cycle to total rewards
    mapping(uint256 => uint256) public rewards;

    // Mapping from cycle to remaining rewards
    mapping(uint256 => uint256) public rewardsLeft;

    // Mapping from cycle to participant's valid submissions count
    mapping(uint256 => mapping(address => uint256)) public submissions;

    // Mapping from cycle to total submissions count
    mapping(uint256 => uint256) public totalSubmissions;

    uint256 public maxSubmissionsPerCycle;

    // Duration of a cycle in blocks
    uint256 public cycleDuration;

    // Block number when the last cycle was started
    uint256 public lastCycleStartBlock;

    // Next cycle number
    uint256 public nextCycle;

    // Events
    event CycleStarted(uint256 cycleStartBlock);
    event CycleDurationUpdated(uint256 newDuration);
    event Submission(address indexed participant, uint256 amount);
    event ClaimedAllocation(uint256 indexed cycle, uint256 amount);

    /**
     * @dev Constructor for the Planty contract
     * @param _admin Address of the admin
     * @param _x2EarnRewardsPoolContract Address of the X2EarnRewardsPool contract
     * @param _cycleDuration Duration of each cycle in blocks
     * @param _maxSubmissionsPerCycle Maximum submissions allowed per cycle
     * @param _appId The appId generated by the X2EarnApps contract when app was added to VeBetterDAO
     */
    constructor(
        address _admin,
        address _x2EarnRewardsPoolContract,
        uint256 _cycleDuration,
        uint256 _maxSubmissionsPerCycle,
        bytes32 _appId
    ) {
        require(_admin != address(0), 'Planty: _admin address cannot be the zero address');
        require(_x2EarnRewardsPoolContract != address(0), 'Planty: x2EarnRewardsPool contract address cannot be the zero address');

        x2EarnRewardsPoolContract = IX2EarnRewardsPool(_x2EarnRewardsPoolContract);
        maxSubmissionsPerCycle = _maxSubmissionsPerCycle;
        cycleDuration = _cycleDuration;
        nextCycle = 1;
        appId = _appId;
        
        _grantRole(DEFAULT_ADMIN_ROLE, _admin);
    }

    /**
     * @dev Function to trigger a new cycle
     */
    function triggerCycle() public onlyRole(DEFAULT_ADMIN_ROLE) {
        lastCycleStartBlock = block.number; // Update the start block to the current block
        nextCycle++;
        emit CycleStarted(lastCycleStartBlock);
    }

    /**
     * @dev Registers a valid submission
     * @param participant Address of the participant
     * @param amount Amount of rewards to be given for the submission
     */
    function registerValidSubmission(address participant, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(amount > 0, 'Planty: Amount must be greater than 0');
        require(submissions[getCurrentCycle()][participant] < maxSubmissionsPerCycle, 'Planty: Max submissions per user reached');
        require(block.number < getNextCycleBlock(), 'Planty: Cycle is over');
        require(rewardsLeft[getCurrentCycle()] >= amount, 'Planty: Not enough rewards left');

        // Register the submission
        submissions[getCurrentCycle()][participant]++;
        // Increment the total submissions count
        totalSubmissions[getCurrentCycle()]++;
        // Decrease the rewards left
        rewardsLeft[getCurrentCycle()] -= amount;

        // Transfer the reward to the participant, will revert if the transfer fails
        // The last parameter is the proof of the sustainable action the user is rewarded for.
        // It is optional and can be left empty, but it is recommended to provide a proof for transparency and to avoid disputes.
        // Read more about proofs in the VeBetterDAO documentation: https://docs.vebetterdao.org/developer-guides/sustainability-proofs
        x2EarnRewardsPoolContract.distributeReward(appId, amount, participant, '');

        emit Submission(participant, amount);
    }

    /**
     * @dev Registers multiple submissions at once (batch processing)
     * @param participants Array of participant addresses
     * @param amounts Array of reward amounts corresponding to each participant
     */
    function registerBatchSubmissions(address[] calldata participants, uint256[] calldata amounts) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(participants.length == amounts.length, 'Planty: Arrays length mismatch');
        require(participants.length > 0, 'Planty: Empty arrays');
        require(participants.length <= 100, 'Planty: Batch size too large');
        
        uint256 currentCycle = getCurrentCycle();
        require(block.number < getNextCycleBlock(), 'Planty: Cycle is over');
        
        uint256 totalAmount = 0;
        
        // First pass: validate and calculate total amount
        for (uint i = 0; i < participants.length; i++) {
            require(amounts[i] > 0, 'Planty: Amount must be greater than 0');
            require(submissions[currentCycle][participants[i]] < maxSubmissionsPerCycle, 'Planty: Max submissions per user reached');
            totalAmount += amounts[i];
        }
        
        require(rewardsLeft[currentCycle] >= totalAmount, 'Planty: Not enough rewards left');
        
        // Second pass: process each submission
        for (uint i = 0; i < participants.length; i++) {
            // Register the submission
            submissions[currentCycle][participants[i]]++;
            // Increment the total submissions count
            totalSubmissions[currentCycle]++;
            // Decrease the rewards left
            rewardsLeft[currentCycle] -= amounts[i];
            
            // Transfer reward to participant
            x2EarnRewardsPoolContract.distributeReward(appId, amounts[i], participants[i], '');
            
            emit Submission(participants[i], amounts[i]);
        }
    }

    /**
     * @dev Set the allocation for the next cycle
     * @param amount Amount of tokens to be allocated
     */
    function setRewardsAmount(uint256 amount) public onlyRole(DEFAULT_ADMIN_ROLE) {
        require(amount <= x2EarnRewardsPoolContract.availableFunds(appId), 'Planty: Insufficient balance on the X2EarnRewardsPool contract');
        rewards[nextCycle] = amount;
        rewardsLeft[nextCycle] = amount;
        emit ClaimedAllocation(nextCycle, amount);
    }

    /**
     * @dev Withdraws remaining rewards of a specific cycle
     * @param cycle The cycle number to withdraw rewards from
     */
    function withdrawRewards(uint256 cycle) public onlyRole(DEFAULT_ADMIN_ROLE) {
        require(rewards[cycle] > 0, 'Planty: No rewards to withdraw');
        require(cycle < getCurrentCycle(), 'Planty: Cycle is not over');
        uint256 amount = rewardsLeft[cycle];
        rewardsLeft[cycle] = 0;

        // will revert if the withdraw fails
        x2EarnRewardsPoolContract.withdraw(amount, appId, string.concat('Withdraws remaining rewards of cycle nr.', Strings.toString(cycle)));
    }

    // ---------------- SETTERS ---------------- //

    /**
     * @dev Sets the maximum submissions allowed per cycle
     * @param _maxSubmissionsPerCycle New maximum submissions per cycle
     */
    function setMaxSubmissionsPerCycle(uint256 _maxSubmissionsPerCycle) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(_maxSubmissionsPerCycle > 0, 'Planty: Max submissions per cycle must be greater than 0');
        maxSubmissionsPerCycle = _maxSubmissionsPerCycle;
    }

    /**
     * @dev Sets the next cycle number
     * @param _nextCycle New next cycle number
     */
    function setNextCycle(uint256 _nextCycle) external onlyRole(DEFAULT_ADMIN_ROLE) {
        nextCycle = _nextCycle;
    }

    /**
     * @dev Sets the appId provided by VeBetterDAO
     * @param _appId The new app id
     */
    function setAppId(bytes32 _appId) external onlyRole(DEFAULT_ADMIN_ROLE) {
        appId = _appId;
    }

    // ---------------- GETTERS ---------------- //

    /**
     * @dev Returns the current cycle number
     * @return Current cycle number
     */
    function getCurrentCycle() public view returns (uint256) {
        return nextCycle - 1;
    }

    /**
     * @dev Returns the block number for the next cycle
     * @return Block number when the next cycle starts
     */
    function getNextCycleBlock() public view returns (uint256) {
        return lastCycleStartBlock + cycleDuration;
    }

    /**
     * @dev Checks if the participant has reached the maximum submissions for the current cycle
     * @param participant Address of the participant
     * @return True if the participant has reached the maximum submissions, otherwise false
     */
    function isUserMaxSubmissionsReached(address participant) public view returns (bool) {
        return submissions[getCurrentCycle()][participant] >= maxSubmissionsPerCycle;
    }
}
